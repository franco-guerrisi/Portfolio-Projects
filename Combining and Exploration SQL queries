
-- Checking if all tables share the same name and quantity of columns
SELECT
        column_name,
        COUNT(table_name) AS column_count
FROM
        `cyclist-415619.Cyclist.INFORMATION_SCHEMA.COLUMNS`
GROUP BY
        1;
-- As a result we got the same 13 columns in each 12 tables


-- Creating table combining 12 months tables
CREATE TABLE IF NOT EXISTS `cyclist-415619.Cyclist.2023_tripdata_combined` AS (
  SELECT * FROM `cyclist-415619.Cyclist.2023_01_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_02_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_03_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_04_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_05_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_06_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_07_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_08_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_09_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_10_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_11_tripdata`
  UNION ALL
  SELECT * FROM `cyclist-415619.Cyclist.2023_12_tripdata`
  );


-- Count number of rows.
SELECT COUNT(*) as total_rows
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`;
-- As a result we got 5,719,877 rows of data for the entire year.



-- Dataset Exploration - First, let's examine the table structure:

SELECT 
  column_name, 
  data_type,
  is_nullable
FROM 
  cyclist-415619.Cyclist.INFORMATION_SCHEMA.COLUMNS
WHERE 
  table_name = '2023_tripdata_combined';



-- Checking for number of null values in all columns.
-- The notation COUNT(column_name) only considers rows where the column contains a non-NULL value.
-- Also checking earliest and latest date for quality.
SELECT 
 COUNT(*) - COUNT(ride_id) ride_id,
 COUNT(*) - COUNT(rideable_type) rideable_type,
 COUNT(*) - COUNT(started_at) started_at,
 COUNT(*) - COUNT(ended_at) ended_at,
 COUNT(*) - COUNT(start_station_name) start_station_name,
 COUNT(*) - COUNT(start_station_id) start_station_id,
 COUNT(*) - COUNT(end_station_name) end_station_name,
 COUNT(*) - COUNT(end_station_id) end_station_id,
 COUNT(*) - COUNT(start_lat) start_lat,
 COUNT(*) - COUNT(start_lng) start_lng,
 COUNT(*) - COUNT(end_lat) end_lat,
 COUNT(*) - COUNT(end_lng) end_lng,
 COUNT(*) - COUNT(member_casual) member_casual,
 MIN(started_at) AS earliest_date,
 MAX(ended_at) AS latest_date
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`;



SELECT
  COUNT(*) AS total_records,
  COUNT(DISTINCT ride_id) AS unique_rides,
  SUM(CASE WHEN start_station_name IS NULL THEN 1 ELSE 0 END) AS missing_start_stations,
  SUM(CASE WHEN end_station_name IS NULL THEN 1 ELSE 0 END) AS missing_end_stations,
  MIN(started_at) AS earliest_date,
  MAX(ended_at) AS latest_date
FROM
  `cyclist-415619.Cyclist.2023_tripdata_combined`;

-- Here I can see that apparently there is a 2024 trip.


-- So I check on started trips first.
SELECT 
  COUNT(*) AS rides_2024
FROM 
  `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE 
  EXTRACT(YEAR FROM started_at) = 2024;
-- And there is none.


-- Then I check for finished trips in 2024.
SELECT 
  COUNT(*) AS rides_2024
FROM 
  `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE 
  EXTRACT(YEAR FROM ended_at) = 2024;
-- Here I have 45 trips ended in 2024, it means they started in 2023, data is correct.





-- Checking for duplicate rows
SELECT COUNT(ride_id) - COUNT(DISTINCT ride_id) AS duplicate_rows
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`;
-- No duplicates were found.


-- Check the 16 lenght on ride_id column.
SELECT LENGTH(ride_id) AS lenght_ride_id, 
COUNT(ride_id) AS no_of_rows
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
GROUP BY lenght_ride_id;
-- all rows with the correct lenght.


-- We offer 3 unique types of bikes to ride, let's get the no_of_trips of each.
SELECT DISTINCT rideable_type, 
COUNT(rideable_type) AS no_of_trips
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
GROUP BY rideable_type;


-- Checking TIMESTAMP on columns started_at, ended_at. YYYY-MM-DD hh:mm:ss UTC
SELECT started_at, ended_at
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
LIMIT 10;



-- Creating a new column ride_lenght using started_at and ended_at
SELECT (ended_at - started_at) AS ride_lenght
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
UPDATE;



-- Get the rides longer than a day using minutes as measure to calculate. There are 1440 minutes in one day.
SELECT COUNT(*) AS longer_than_a_day
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE (
        EXTRACT(HOUR FROM (ended_at - started_at)) * 60 +
        EXTRACT(MINUTE FROM (ended_at - started_at)) + 
        EXTRACT(SECOND FROM (ended_at - started_at)) / 60) >= 1440;
-- longer than a day - total rows = 6418



-- Get the rides less than a minute using minutes measure to calculate.
SELECT COUNT(*) AS less_than_a_minute
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE (
        EXTRACT(HOUR FROM(ended_at - started_at)) * 60 +
        EXTRACT(MINUTE FROM(ended_at - started_at)) +
        EXTRACT(SECOND FROM(ended_at - started_at)) / 60) <= 1;
-- less than a minute - total rows = 151069



-- Checking missing and null values in start_station_name, start_station_id
SELECT DISTINCT start_station_name,
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
ORDER BY start_station_name;


SELECT COUNT(ride_id) AS rows_with_start_station_null          
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE start_station_name IS NULL OR start_station_id IS NULL;
-- Got 875848 rows


-- Checking missing and null values in end_station_name, end_station_id 
SELECT DISTINCT end_station_name
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
ORDER BY end_station_name;

SELECT COUNT(ride_id) AS rows_with_null_end_station         
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE end_station_name IS NULL OR end_station_id IS NULL;
-- Got 929343 rows


-- Checking missing and null values in end_lat, end_lng 
SELECT COUNT(ride_id) AS rows_with_null_end_loc
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
WHERE end_lat IS NULL OR end_lng IS NULL;
-- Got 6990 rows


-- Checking 2 unique values on member_casual column
SELECT DISTINCT member_casual, COUNT(member_casual) AS no_of_trips
FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
GROUP BY member_casual;


-- Cleaning Data Phase

DROP TABLE IF EXISTS `cyclist-415619.Cyclist.new_2023_tripdata_combined`;


-- Creating new table with clean data. 
-- Further I want to analyze the days with  more rides, so I CASE on started_at column.

CREATE TABLE IF NOT EXISTS `cyclist-415619.Cyclist.new_2023_tripdata_combined` AS (
  SELECT 
    a.ride_id, rideable_type, started_at, ended_at, 
    ride_length,
    CASE EXTRACT(DAYOFWEEK FROM started_at) 
      WHEN 1 THEN 'SUN'
      WHEN 2 THEN 'MON'
      WHEN 3 THEN 'TUES'
      WHEN 4 THEN 'WED'
      WHEN 5 THEN 'THURS'
      WHEN 6 THEN 'FRI'
      WHEN 7 THEN 'SAT'    
    END AS day_of_week,
    CASE EXTRACT(MONTH FROM started_at)
      WHEN 1 THEN 'JAN'
      WHEN 2 THEN 'FEB'
      WHEN 3 THEN 'MAR'
      WHEN 4 THEN 'APR'
      WHEN 5 THEN 'MAY'
      WHEN 6 THEN 'JUN'
      WHEN 7 THEN 'JUL'
      WHEN 8 THEN 'AUG'
      WHEN 9 THEN 'SEP'
      WHEN 10 THEN 'OCT'
      WHEN 11 THEN 'NOV'
      WHEN 12 THEN 'DEC'
    END AS month,
    start_station_name, end_station_name, 
    start_lat, start_lng, end_lat, end_lng, member_casual
  FROM `cyclist-415619.Cyclist.2023_tripdata_combined` a
  JOIN (
    SELECT ride_id, (
      EXTRACT(HOUR FROM (ended_at - started_at)) * 60 +
      EXTRACT(MINUTE FROM (ended_at - started_at)) +
      EXTRACT(SECOND FROM (ended_at - started_at)) / 60) AS ride_length
    FROM `cyclist-415619.Cyclist.2023_tripdata_combined`
  ) b 
  ON a.ride_id = b.ride_id
  WHERE 
    start_station_name IS NOT NULL AND
    end_station_name IS NOT NULL AND
    end_lat IS NOT NULL AND
    end_lng IS NOT NULL AND
    ride_length > 1 AND ride_length < 1440
);


-- Only incluiding rides duration that lasts longer than 1 minute and less than a day.


-- returned 4,243,432 rows so 1,476,445 rows were removed in total.
SELECT COUNT(ride_id) AS no_of_rows
FROM `cyclist-415619.Cyclist.new_2023_tripdata_combined`;


-- Round minutes on ride_lenght
UPDATE `cyclist-415619.Cyclist.new_2023_tripdata_combined`
SET ride_length = ROUND(ride_length, 2)
WHERE TRUE;


-- set ride_id as primary key
ALTER TABLE `cyclist-415619.Cyclist.new_2023_tripdata_combined`
ADD PRIMARY KEY(ride_id) NOT ENFORCED;

